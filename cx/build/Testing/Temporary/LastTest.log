Start testing: Mar 22 23:42 CST
----------------------------------------------------------
1/3 Testing: lexMem
1/3 Test: lexMem
Command: "/home/sheep/Compiler/cx/build/lexcpp/lex"
Directory: /home/sheep/Compiler/cx/build/lexcpp
"lexMem" start time: Mar 22 23:42 CST
Output:
----------------------------------------------------------
h1:                                                                               
h2: 
h3:                                                                             
h4:                                                                              
h5:                                                                          
h6:                                       
h7:    
h8: 
h9: %{
h11: #include <stdio.h>
h12: #include <string.h>
h13: #include <search.h>	 /* Function prototype for bsearch(). 	*/
h14: #include <tools/debug.h> /* Needed by symtab.h.			*/
h15: #include <tools/hash.h>	 /* Needed by symtab.h.			*/
h16: #include <tools/l.h>
h17: #include <tools/compiler.h>
h18: #include "yyout.h"	/* Token defs. created by occs. Yacc uses y.tab.h. */
h19: #include "symtab.h"	/* Needed to pass attributes to parser.		   */
h20: #include "value.h"	/* ditto					   */
h21: 
h22: extern union {		      /* This definition must duplicate the %union */
h23:     char	*p_char;      /* in c.y.				     */
h24:     symbol	*p_sym;
h25:     link	*p_link;
h26:     structdef	*p_sdef;
h27:     specifier	*p_spec;
h28:     value	*p_value;
h29:     int		integer;
h30:     int		ascii;
h31: }
h32: yylval;				/* Declared by occs in yyout.c. */
h33: 
h34: extern FILE *yycodeout;		/* Declared by occs in yyout.c	*/
h35: 
h36: static int id_or_keyword P(( char *lex ));	/* declared, below */
h37: /*----------------------------------------------------------------------*/
h38: 
h39: #define YYERROR	yyerror	/* Forces LeX-generated error messages to be     */
h40: 			/* output in an occs window if debugging mode    */
h41: 			/* is enabled.  Does nothing in UNIX lex. Remove */
h42: 			/* this definition if you aren't using occs -d.  */
h43: 
h44: /*----------------------------------------------------------------------*/
h45: %}
h46: 
h47: let     [_a-zA-Z]	          					  
h48: alnum   [_a-zA-Z0-9]	                         			  
h49: h       [0-9a-fA-F]	                    				  
h50: o       [0-7]		              					  
h51: d       [0-9]		                				  
h52: suffix  [UuLl]		                                      		  
h53: white   [\x00-\x09\x0b\s]                                                 
h54: 
  index 0 is nullptr
  index 1: --- suffix --- [[UuLl]]---
--- alnum --- [[_a-zA-Z0-9]]---
--- let --- [[_a-zA-Z]]---

  index 2 is nullptr
  index 3: --- o --- [[0-7]]---

  index 4: --- d --- [[0-9]]---

  index 5: --- white --- [[\x00-\x09\x0b\s]]---

  index 6 is nullptr
  index 7 is nullptr
  index 8: --- h --- [[0-9a-fA-F]]---

  index 9 is nullptr
  index 10 is nullptr
  index 11 is nullptr
b55: "/*"                {
b56:                         int i;
b57: 
b58:                         while( i = ii_input() )
b59:                         {
b60:                            if( i < 0 )
b61:                               ii_flushbuf();   		/* Discard lexeme. */
b62: 
b63:                            else if( i == '*'  &&  ii_lookahead(1) == '/' )
b64:                            {
b65:                                 ii_input();
b66:                                 break;          	/* Recognized comment.*/
b67:                            }
b68:                         }
b69: 
b70:                         if( i == 0 )
b71:                            yyerror( "End of file in comment\n" );
b72:                     }
b73: 
b74: \"(\\.|[^\"])*\"    { return STRING; }
b75: 
b76: \"(\\.|[^\"])*\n    yyerror("Adding missing \" to string constant\n");
b77: 		    yymore();
b78: 
b79: '.'                                  |
b80: '\\.'                         	     |
b81: '\\{o}({o}{o}?)?'		     |
b82: '\\x{h}({h}{h}?)?'		     |
b83: 0{o}*{suffix}?                	     |
b84: 0x{h}+{suffix}?               	     |
b85: [1-9]{d}*{suffix}?                   return ICON ;
b86: 
b87: ({d}+|{d}+\.{d}*|{d}*\.{d}+)([eE][\-+]?{d}+)?[fF]?   return FCON ;
b88: 
b89: "("                     return LP;
b90: ")"                     return RP;
b91: "{"                     return LC;
b92: "}"                     return RC;
b93: "["                     return LB;
b94: "]"                     return RB;
b95: 
b96: "->"                    |
b97: "."                     yylval.ascii = *yytext;
b98: 			return STRUCTOP;
b99: 
b100: "++"                    |
b101: "--"                    yylval.ascii = *yytext;
b102: 			return INCOP;
b103: 
b104: [~!]                    yylval.ascii = *yytext;
b105: 			return UNOP;
b106: 
b107: "*"                     return STAR;
b108: 
b109: [/%]                    yylval.ascii = *yytext;
b110: 			return DIVOP;
b111: 
b112: "+"                     return PLUS;
b113: "-"                     return MINUS;
b114: 
b115: <<|>>                   yylval.ascii = *yytext;
b116: 		        return SHIFTOP;
b117: 
b118: [<>]=?                  yylval.ascii = yytext[1] ? (yytext[0]=='>' ? 'G' : 'L')
b119: 						 : (yytext[0]		      );
b120: 			return RELOP;
b121: 
b122: [!=]=                   yylval.ascii = *yytext;
b123:                    	return EQUOP;
b124: 
b125: [*/%+\-&|^]=		|
b126: (<<|>>)=		yylval.ascii = *yytext;
b127: 			return ASSIGNOP;
b128: 
b129: "="                     return EQUAL;
b130: "&"                     return AND;
b131: "^"                     return XOR;
b132: "|"                     return OR;
b133: "&&"                    return ANDAND;
b134: "||"                    return OROR;
b135: "?"                     return QUEST;
b136: ":"                     return COLON;
b137: ","                     return COMMA;
b138: ";"                     return SEMI;
b139: "..."			return ELLIPSIS;
b140: 
b141: {let}{alnum}*           return id_or_keyword( yytext );
b142: 
b143: \n		     fprintf(yycodeout, "\t\t\t\t\t\t\t\t\t/*%d*/\n", yylineno);
b144: {white}+             ;	/* ignore other white space */
b145: .                    yyerror( "Illegal character <%s>\n", yytext );
b146: %%
rule: "/*"   action: {
                        int i;
                        while( i = ii_input() )
                        {
                           if( i < 0 )
                              ii_flushbuf();   		/* Discard lexeme. */
                           else if( i == '*'  &&  ii_lookahead(1) == '/' )
                           {
                                ii_input();
                                break;          	/* Recognized comment.*/
                           }
                        }
                        if( i == 0 )
                           yyerror( "End of file in comment\n" );
                    }

rule: \"(\\.|[^\"])*\"   action: { return STRING; }

rule: \"(\\.|[^\"])*\n   action: yyerror("Adding missing \" to string constant\n");
		    yymore();

rule: '.'   action: return ICON ;

rule: '\\.'   action: return ICON ;

rule: '\\{o}({o}{o}?)?'   action: return ICON ;

rule: '\\x{h}({h}{h}?)?'   action: return ICON ;

rule: 0{o}*{suffix}?   action: return ICON ;

rule: 0x{h}+{suffix}?   action: return ICON ;

rule: [1-9]{d}*{suffix}?   action: return ICON ;

rule: ({d}+|{d}+\.{d}*|{d}*\.{d}+)([eE][\-+]?{d}+)?[fF]?   action: return FCON ;

rule: "("   action: return LP;

rule: ")"   action: return RP;

rule: "{"   action: return LC;

rule: "}"   action: return RC;

rule: "["   action: return LB;

rule: "]"   action: return RB;

rule: "->"   action: yylval.ascii = *yytext;
			return STRUCTOP;

rule: "."   action: yylval.ascii = *yytext;
			return STRUCTOP;

rule: "++"   action: yylval.ascii = *yytext;
			return INCOP;

rule: "--"   action: yylval.ascii = *yytext;
			return INCOP;

rule: [~!]   action: yylval.ascii = *yytext;
			return UNOP;

rule: "*"   action: return STAR;

rule: [/%]   action: yylval.ascii = *yytext;
			return DIVOP;

rule: "+"   action: return PLUS;

rule: "-"   action: return MINUS;

rule: <<|>>   action: yylval.ascii = *yytext;
		        return SHIFTOP;

rule: [<>]=?   action: yylval.ascii = yytext[1] ? (yytext[0]=='>' ? 'G' : 'L')
						 : (yytext[0]		      );
			return RELOP;

rule: [!=]=   action: yylval.ascii = *yytext;
                   	return EQUOP;

rule: [*/%+\-&|^]=   action: yylval.ascii = *yytext;
			return ASSIGNOP;

rule: (<<|>>)=   action: yylval.ascii = *yytext;
			return ASSIGNOP;

rule: "="   action: return EQUAL;

rule: "&"   action: return AND;

rule: "^"   action: return XOR;

rule: "|"   action: return OR;

rule: "&&"   action: return ANDAND;

rule: "||"   action: return OROR;

rule: "?"   action: return QUEST;

rule: ":"   action: return COLON;

rule: ","   action: return COMMA;

rule: ";"   action: return SEMI;

rule: "..."   action: return ELLIPSIS;

rule: {let}{alnum}*   action: return id_or_keyword( yytext );

rule: \n   action: fprintf(yycodeout, "\t\t\t\t\t\t\t\t\t/*%d*/\n", yylineno);

rule: {white}+   action: ;	/* ignore other white space */

rule: .   action: yyerror( "Illegal character <%s>\n", yytext );

The is 46 nfa
0, regular is "/*"
1, regular is \"(\\.|[^\"])*\"
2, regular is \"(\\.|[^\"])*\n
3, regular is '.'
4, regular is '\\.'
5, regular is '\\[0-7]([0-7][0-7]?)?'
6, regular is '\\x[0-9a-fA-F]([0-9a-fA-F][0-9a-fA-F]?)?'
7, regular is 0[0-7]*[UuLl]?
8, regular is 0x[0-9a-fA-F]+[UuLl]?
9, regular is [1-9][0-9]*[UuLl]?
10, regular is ([0-9]+|[0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([eE][\-+]?[0-9]+)?[fF]?
11, regular is "("
12, regular is ")"
13, regular is "{"
14, regular is "}"
15, regular is "["
16, regular is "]"
17, regular is "->"
18, regular is "."
19, regular is "++"
20, regular is "--"
21, regular is [~!]
22, regular is "*"
23, regular is [/%]
24, regular is "+"
25, regular is "-"
26, regular is <<|>>
27, regular is [<>]=?
28, regular is [!=]=
29, regular is [*/%+\-&|^]=
30, regular is (<<|>>)=
31, regular is "="
32, regular is "&"
33, regular is "^"
34, regular is "|"
35, regular is "&&"
36, regular is "||"
37, regular is "?"
38, regular is ":"
39, regular is ","
40, regular is ";"
41, regular is "..."
42, regular is [_a-zA-Z][_a-zA-Z0-9]*
43, regular is \n
44, regular is [\x00-\x09\x0b\s]+
45, regular is .

the regular expression is "/*"
L(/)  L(*)  EOS(\000)  
handle 1 regular expression

the regular expression is \"(\\.|[^\"])*\"
L(")  OPEN_PAREN(()  L(\\)  ANY(.)  OR(|)  CCL_START([)  AT_BOL(^)  L(")  CCL_END(])  CLOSE_PAREN())  CLOSURE(*)  L(")  EOS(\000)  
handle 2 regular expression

the regular expression is \"(\\.|[^\"])*\n
L(")  OPEN_PAREN(()  L(\\)  ANY(.)  OR(|)  CCL_START([)  AT_BOL(^)  L(")  CCL_END(])  CLOSE_PAREN())  CLOSURE(*)  L(\n)  EOS(\000)  
handle 3 regular expression

the regular expression is '.'
L(\')  ANY(.)  L(\')  EOS(\000)  
handle 4 regular expression

the regular expression is '\\.'
L(\')  L(\\)  ANY(.)  L(\')  EOS(\000)  
handle 5 regular expression

the regular expression is '\\[0-7]([0-7][0-7]?)?'
L(\')  L(\\)  CCL_START([)  L(0)  DASH(-)  L(7)  CCL_END(])  OPEN_PAREN(()  CCL_START([)  L(0)  DASH(-)  L(7)  CCL_END(])  CCL_START([)  L(0)  DASH(-)  L(7)  CCL_END(])  OPTINAL(?)  CLOSE_PAREN())  OPTINAL(?)  L(\')  EOS(\000)  
handle 6 regular expression

the regular expression is '\\x[0-9a-fA-F]([0-9a-fA-F][0-9a-fA-F]?)?'
L(\')  L(\\)  L(x)  CCL_START([)  L(0)  DASH(-)  L(9)  L(a)  DASH(-)  L(f)  L(A)  DASH(-)  L(F)  CCL_END(])  OPEN_PAREN(()  CCL_START([)  L(0)  DASH(-)  L(9)  L(a)  DASH(-)  L(f)  L(A)  DASH(-)  L(F)  CCL_END(])  CCL_START([)  L(0)  DASH(-)  L(9)  L(a)  DASH(-)  L(f)  L(A)  DASH(-)  L(F)  CCL_END(])  OPTINAL(?)  CLOSE_PAREN())  OPTINAL(?)  L(\')  EOS(\000)  
handle 7 regular expression

the regular expression is 0[0-7]*[UuLl]?
L(0)  CCL_START([)  L(0)  DASH(-)  L(7)  CCL_END(])  CLOSURE(*)  CCL_START([)  L(U)  L(u)  L(L)  L(l)  CCL_END(])  OPTINAL(?)  EOS(\000)  
handle 8 regular expression

the regular expression is 0x[0-9a-fA-F]+[UuLl]?
L(0)  L(x)  CCL_START([)  L(0)  DASH(-)  L(9)  L(a)  DASH(-)  L(f)  L(A)  DASH(-)  L(F)  CCL_END(])  PLUS_CLOSE(+)  CCL_START([)  L(U)  L(u)  L(L)  L(l)  CCL_END(])  OPTINAL(?)  EOS(\000)  
handle 9 regular expression

the regular expression is [1-9][0-9]*[UuLl]?
CCL_START([)  L(1)  DASH(-)  L(9)  CCL_END(])  CCL_START([)  L(0)  DASH(-)  L(9)  CCL_END(])  CLOSURE(*)  CCL_START([)  L(U)  L(u)  L(L)  L(l)  CCL_END(])  OPTINAL(?)  EOS(\000)  
handle 10 regular expression

the regular expression is ([0-9]+|[0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([eE][\-+]?[0-9]+)?[fF]?
OPEN_PAREN(()  CCL_START([)  L(0)  DASH(-)  L(9)  CCL_END(])  PLUS_CLOSE(+)  OR(|)  CCL_START([)  L(0)  DASH(-)  L(9)  CCL_END(])  PLUS_CLOSE(+)  L(.)  CCL_START([)  L(0)  DASH(-)  L(9)  CCL_END(])  CLOSURE(*)  OR(|)  CCL_START([)  L(0)  DASH(-)  L(9)  CCL_END(])  CLOSURE(*)  L(.)  CCL_START([)  L(0)  DASH(-)  L(9)  CCL_END(])  PLUS_CLOSE(+)  CLOSE_PAREN())  OPEN_PAREN(()  CCL_START([)  L(e)  L(E)  CCL_END(])  CCL_START([)  L(-)  PLUS_CLOSE(+)  CCL_END(])  OPTINAL(?)  CCL_START([)  L(0)  DASH(-)  L(9)  CCL_END(])  PLUS_CLOSE(+)  CLOSE_PAREN())  OPTINAL(?)  CCL_START([)  L(f)  L(F)  CCL_END(])  OPTINAL(?)  EOS(\000)  
handle 11 regular expression

the regular expression is "("
L(()  EOS(\000)  
handle 12 regular expression

the regular expression is ")"
L())  EOS(\000)  
handle 13 regular expression

the regular expression is "{"
L({)  EOS(\000)  
handle 14 regular expression

the regular expression is "}"
L(})  EOS(\000)  
handle 15 regular expression

the regular expression is "["
L([)  EOS(\000)  
handle 16 regular expression

the regular expression is "]"
L(])  EOS(\000)  
handle 17 regular expression

the regular expression is "->"
L(-)  L(>)  EOS(\000)  
handle 18 regular expression

the regular expression is "."
L(.)  EOS(\000)  
handle 19 regular expression

the regular expression is "++"
L(+)  L(+)  EOS(\000)  
handle 20 regular expression

the regular expression is "--"
L(-)  L(-)  EOS(\000)  
handle 21 regular expression

the regular expression is [~!]
CCL_START([)  L(~)  L(!)  CCL_END(])  EOS(\000)  
handle 22 regular expression

the regular expression is "*"
L(*)  EOS(\000)  
handle 23 regular expression

the regular expression is [/%]
CCL_START([)  L(/)  L(%)  CCL_END(])  EOS(\000)  
handle 24 regular expression

the regular expression is "+"
L(+)  EOS(\000)  
handle 25 regular expression

the regular expression is "-"
L(-)  EOS(\000)  
handle 26 regular expression

the regular expression is <<|>>
L(<)  L(<)  OR(|)  L(>)  L(>)  EOS(\000)  
handle 27 regular expression

the regular expression is [<>]=?
CCL_START([)  L(<)  L(>)  CCL_END(])  L(=)  OPTINAL(?)  EOS(\000)  
handle 28 regular expression

the regular expression is [!=]=
CCL_START([)  L(!)  L(=)  CCL_END(])  L(=)  EOS(\000)  
handle 29 regular expression

the regular expression is [*/%+\-&|^]=
CCL_START([)  CLOSURE(*)  L(/)  L(%)  PLUS_CLOSE(+)  L(-)  L(&)  OR(|)  AT_BOL(^)  CCL_END(])  L(=)  EOS(\000)  
handle 30 regular expression

the regular expression is (<<|>>)=
OPEN_PAREN(()  L(<)  L(<)  OR(|)  L(>)  L(>)  CLOSE_PAREN())  L(=)  EOS(\000)  
handle 31 regular expression

the regular expression is "="
L(=)  EOS(\000)  
handle 32 regular expression

the regular expression is "&"
L(&)  EOS(\000)  
handle 33 regular expression

the regular expression is "^"
L(^)  EOS(\000)  
handle 34 regular expression

the regular expression is "|"
L(|)  EOS(\000)  
handle 35 regular expression

the regular expression is "&&"
L(&)  L(&)  EOS(\000)  
handle 36 regular expression

the regular expression is "||"
L(|)  L(|)  EOS(\000)  
handle 37 regular expression

the regular expression is "?"
L(?)  EOS(\000)  
handle 38 regular expression

the regular expression is ":"
L(:)  EOS(\000)  
handle 39 regular expression

the regular expression is ","
L(,)  EOS(\000)  
handle 40 regular expression

the regular expression is ";"
L(;)  EOS(\000)  
handle 41 regular expression

the regular expression is "..."
L(.)  L(.)  L(.)  EOS(\000)  
handle 42 regular expression

the regular expression is [_a-zA-Z][_a-zA-Z0-9]*
CCL_START([)  L(_)  L(a)  DASH(-)  L(z)  L(A)  DASH(-)  L(Z)  CCL_END(])  CCL_START([)  L(_)  L(a)  DASH(-)  L(z)  L(A)  DASH(-)  L(Z)  L(0)  DASH(-)  L(9)  CCL_END(])  CLOSURE(*)  EOS(\000)  
handle 43 regular expression

the regular expression is \n
L(\n)  EOS(\000)  
handle 44 regular expression

the regular expression is [\x00-\x09\x0b\s]+
CCL_START([)  L(\000)  DASH(-)  L(\t)  L(\013)  L( )  CCL_END(])  PLUS_CLOSE(+)  EOS(\000)  
handle 45 regular expression

the regular expression is .
ANY(.)  EOS(\000)  
264/768 Nfa states used 

---------------------------NFA-----------------------------
NFA state 0: --> 1 (3) on EPSILON (START STATE)
NFA state 1: --> 2 (--) on /
NFA state 2: --> 4 (--) on *
NFA state 3: --> 5 (14) on EPSILON
NFA state 4: (TERMINAL) accepting <{
                        int i;
                        while( i = ii_input() )
                        {
                           if( i < 0 )
                              ii_flushbuf();   		/* Discard lexeme. */
                           else if( i == '*'  &&  ii_lookahead(1) == '/' )
                           {
                                ii_input();
                                break;          	/* Recognized comment.*/
                           }
                        }
                        if( i == 0 )
                           yyerror( "End of file in comment\n" );
                    }
>
NFA state 5: --> 6 (--) on "
NFA state 6: --> 12 (15) on EPSILON
NFA state 7: --> 8 (--) on \\
NFA state 8: --> 10 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 9: --> 11 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 10: --> 13 (--) on EPSILON
NFA state 11: --> 13 (--) on EPSILON
NFA state 12: --> 7 (9) on EPSILON
NFA state 13: --> 15 (12) on EPSILON
NFA state 14: --> 17 (26) on EPSILON
NFA state 15: --> 16 (--) on "
NFA state 16: (TERMINAL) accepting <{ return STRING; }
>
NFA state 17: --> 18 (--) on "
NFA state 18: --> 24 (27) on EPSILON
NFA state 19: --> 20 (--) on \\
NFA state 20: --> 22 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 21: --> 23 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 22: --> 25 (--) on EPSILON
NFA state 23: --> 25 (--) on EPSILON
NFA state 24: --> 19 (21) on EPSILON
NFA state 25: --> 27 (24) on EPSILON
NFA state 26: --> 29 (31) on EPSILON
NFA state 27: --> 28 (--) on \n
NFA state 28: (TERMINAL) accepting <yyerror("Adding missing \" to string constant\n");
		    yymore();
>
NFA state 29: --> 30 (--) on \'
NFA state 30: --> 32 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 31: --> 34 (36) on EPSILON
NFA state 32: --> 33 (--) on \'
NFA state 33: (TERMINAL) accepting <return ICON ;
>
NFA state 34: --> 35 (--) on \'
NFA state 35: --> 37 (--) on \\
NFA state 36: --> 40 (48) on EPSILON
NFA state 37: --> 38 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 38: --> 39 (--) on \'
NFA state 39: (TERMINAL) accepting <return ICON ;
>
NFA state 40: --> 41 (--) on \'
NFA state 41: --> 43 (--) on \\
NFA state 42: --> 45 (--) on [01234567]
NFA state 43: --> 44 (--) on [01234567]
NFA state 44: --> 42 (50) on EPSILON
NFA state 45: --> 46 (49) on EPSILON
NFA state 46: --> 47 (--) on [01234567]
NFA state 47: --> 49 (--) on EPSILON
NFA state 48: --> 52 (61) on EPSILON
NFA state 49: --> 50 (--) on EPSILON
NFA state 50: --> 51 (--) on \'
NFA state 51: (TERMINAL) accepting <return ICON ;
>
NFA state 52: --> 53 (--) on \'
NFA state 53: --> 55 (--) on \\
NFA state 54: --> 58 (--) on [0123456789ABCDEFabcdef]
NFA state 55: --> 56 (--) on x
NFA state 56: --> 57 (--) on [0123456789ABCDEFabcdef]
NFA state 57: --> 54 (63) on EPSILON
NFA state 58: --> 59 (62) on EPSILON
NFA state 59: --> 60 (--) on [0123456789ABCDEFabcdef]
NFA state 60: --> 62 (--) on EPSILON
NFA state 61: --> 65 (72) on EPSILON
NFA state 62: --> 63 (--) on EPSILON
NFA state 63: --> 64 (--) on \'
NFA state 64: (TERMINAL) accepting <return ICON ;
>
NFA state 65: --> 66 (--) on 0
NFA state 66: --> 67 (70) on EPSILON
NFA state 67: --> 68 (--) on [01234567]
NFA state 68: --> 70 (67) on EPSILON
NFA state 69: --> 71 (--) on [LUlu]
NFA state 70: --> 69 (73) on EPSILON
NFA state 71: --> 73 (--) on EPSILON
NFA state 72: --> 74 (82) on EPSILON
NFA state 73: (TERMINAL) accepting <return ICON ;
>
NFA state 74: --> 75 (--) on 0
NFA state 75: --> 77 (--) on x
NFA state 76: --> 78 (--) on [0123456789ABCDEFabcdef]
NFA state 77: --> 76 (--) on EPSILON
NFA state 78: --> 80 (76) on EPSILON
NFA state 79: --> 81 (--) on [LUlu]
NFA state 80: --> 79 (83) on EPSILON
NFA state 81: --> 83 (--) on EPSILON
NFA state 82: --> 84 (91) on EPSILON
NFA state 83: (TERMINAL) accepting <return ICON ;
>
NFA state 84: --> 85 (--) on [123456789]
NFA state 85: --> 86 (89) on EPSILON
NFA state 86: --> 87 (--) on [0123456789]
NFA state 87: --> 89 (86) on EPSILON
NFA state 88: --> 90 (--) on [LUlu]
NFA state 89: --> 88 (92) on EPSILON
NFA state 90: --> 92 (--) on EPSILON
NFA state 91: --> 114 (128) on EPSILON
NFA state 92: (TERMINAL) accepting <return ICON ;
>
NFA state 93: --> 94 (--) on [0123456789]
NFA state 94: --> 96 (93) on EPSILON
NFA state 95: --> 93 (--) on EPSILON
NFA state 96: --> 106 (--) on EPSILON
NFA state 97: --> 98 (--) on [0123456789]
NFA state 98: --> 100 (97) on EPSILON
NFA state 99: --> 97 (--) on EPSILON
NFA state 100: --> 102 (--) on .
NFA state 101: --> 103 (--) on [0123456789]
NFA state 102: --> 101 (105) on EPSILON
NFA state 103: --> 105 (101) on EPSILON
NFA state 104: --> 95 (99) on EPSILON
NFA state 105: --> 106 (--) on EPSILON
NFA state 106: --> 116 (--) on EPSILON
NFA state 107: --> 108 (--) on [0123456789]
NFA state 108: --> 110 (107) on EPSILON
NFA state 109: --> 107 (110) on EPSILON
NFA state 110: --> 112 (--) on .
NFA state 111: --> 113 (--) on [0123456789]
NFA state 112: --> 111 (--) on EPSILON
NFA state 113: --> 115 (111) on EPSILON
NFA state 114: --> 104 (109) on EPSILON
NFA state 115: --> 116 (--) on EPSILON
NFA state 116: --> 117 (126) on EPSILON
NFA state 117: --> 118 (--) on [Ee]
NFA state 118: --> 119 (122) on EPSILON
NFA state 119: --> 120 (--) on [+-]
NFA state 120: --> 122 (--) on EPSILON
NFA state 121: --> 123 (--) on [0123456789]
NFA state 122: --> 121 (--) on EPSILON
NFA state 123: --> 125 (121) on EPSILON
NFA state 124: --> 127 (--) on [Ff]
NFA state 125: --> 126 (--) on EPSILON
NFA state 126: --> 124 (129) on EPSILON
NFA state 127: --> 129 (--) on EPSILON
NFA state 128: --> 130 (132) on EPSILON
NFA state 129: (TERMINAL) accepting <return FCON ;
>
NFA state 130: --> 131 (--) on (
NFA state 131: (TERMINAL) accepting <return LP;
>
NFA state 132: --> 133 (135) on EPSILON
NFA state 133: --> 134 (--) on )
NFA state 134: (TERMINAL) accepting <return RP;
>
NFA state 135: --> 136 (138) on EPSILON
NFA state 136: --> 137 (--) on {
NFA state 137: (TERMINAL) accepting <return LC;
>
NFA state 138: --> 139 (141) on EPSILON
NFA state 139: --> 140 (--) on }
NFA state 140: (TERMINAL) accepting <return RC;
>
NFA state 141: --> 142 (144) on EPSILON
NFA state 142: --> 143 (--) on [
NFA state 143: (TERMINAL) accepting <return LB;
>
NFA state 144: --> 145 (147) on EPSILON
NFA state 145: --> 146 (--) on ]
NFA state 146: (TERMINAL) accepting <return RB;
>
NFA state 147: --> 148 (150) on EPSILON
NFA state 148: --> 149 (--) on -
NFA state 149: --> 151 (--) on >
NFA state 150: --> 152 (154) on EPSILON
NFA state 151: (TERMINAL) accepting <yylval.ascii = *yytext;
			return STRUCTOP;
>
NFA state 152: --> 153 (--) on .
NFA state 153: (TERMINAL) accepting <yylval.ascii = *yytext;
			return STRUCTOP;
>
NFA state 154: --> 155 (157) on EPSILON
NFA state 155: --> 156 (--) on +
NFA state 156: --> 158 (--) on +
NFA state 157: --> 159 (161) on EPSILON
NFA state 158: (TERMINAL) accepting <yylval.ascii = *yytext;
			return INCOP;
>
NFA state 159: --> 160 (--) on -
NFA state 160: --> 162 (--) on -
NFA state 161: --> 163 (165) on EPSILON
NFA state 162: (TERMINAL) accepting <yylval.ascii = *yytext;
			return INCOP;
>
NFA state 163: --> 164 (--) on [!~]
NFA state 164: (TERMINAL) accepting <yylval.ascii = *yytext;
			return UNOP;
>
NFA state 165: --> 166 (168) on EPSILON
NFA state 166: --> 167 (--) on *
NFA state 167: (TERMINAL) accepting <return STAR;
>
NFA state 168: --> 169 (171) on EPSILON
NFA state 169: --> 170 (--) on [%/]
NFA state 170: (TERMINAL) accepting <yylval.ascii = *yytext;
			return DIVOP;
>
NFA state 171: --> 172 (174) on EPSILON
NFA state 172: --> 173 (--) on +
NFA state 173: (TERMINAL) accepting <return PLUS;
>
NFA state 174: --> 175 (177) on EPSILON
NFA state 175: --> 176 (--) on -
NFA state 176: (TERMINAL) accepting <return MINUS;
>
NFA state 177: --> 183 (186) on EPSILON
NFA state 178: --> 179 (--) on <
NFA state 179: --> 181 (--) on <
NFA state 180: --> 182 (--) on >
NFA state 181: --> 185 (--) on EPSILON
NFA state 182: --> 184 (--) on >
NFA state 183: --> 178 (180) on EPSILON
NFA state 184: --> 185 (--) on EPSILON
NFA state 185: (TERMINAL) accepting <yylval.ascii = *yytext;
		        return SHIFTOP;
>
NFA state 186: --> 187 (191) on EPSILON
NFA state 187: --> 188 (--) on [<>]
NFA state 188: --> 189 (192) on EPSILON
NFA state 189: --> 190 (--) on =
NFA state 190: --> 192 (--) on EPSILON
NFA state 191: --> 193 (195) on EPSILON
NFA state 192: (TERMINAL) accepting <yylval.ascii = yytext[1] ? (yytext[0]=='>' ? 'G' : 'L')
						 : (yytext[0]		      );
			return RELOP;
>
NFA state 193: --> 194 (--) on [!=]
NFA state 194: --> 196 (--) on =
NFA state 195: --> 197 (199) on EPSILON
NFA state 196: (TERMINAL) accepting <yylval.ascii = *yytext;
                   	return EQUOP;
>
NFA state 197: --> 198 (--) on [%&*+-/^|]
NFA state 198: --> 200 (--) on =
NFA state 199: --> 206 (209) on EPSILON
NFA state 200: (TERMINAL) accepting <yylval.ascii = *yytext;
			return ASSIGNOP;
>
NFA state 201: --> 202 (--) on <
NFA state 202: --> 204 (--) on <
NFA state 203: --> 205 (--) on >
NFA state 204: --> 208 (--) on EPSILON
NFA state 205: --> 207 (--) on >
NFA state 206: --> 201 (203) on EPSILON
NFA state 207: --> 208 (--) on EPSILON
NFA state 208: --> 210 (--) on =
NFA state 209: --> 211 (213) on EPSILON
NFA state 210: (TERMINAL) accepting <yylval.ascii = *yytext;
			return ASSIGNOP;
>
NFA state 211: --> 212 (--) on =
NFA state 212: (TERMINAL) accepting <return EQUAL;
>
NFA state 213: --> 214 (216) on EPSILON
NFA state 214: --> 215 (--) on &
NFA state 215: (TERMINAL) accepting <return AND;
>
NFA state 216: --> 217 (219) on EPSILON
NFA state 217: --> 218 (--) on ^
NFA state 218: (TERMINAL) accepting <return XOR;
>
NFA state 219: --> 220 (222) on EPSILON
NFA state 220: --> 221 (--) on |
NFA state 221: (TERMINAL) accepting <return OR;
>
NFA state 222: --> 223 (225) on EPSILON
NFA state 223: --> 224 (--) on &
NFA state 224: --> 226 (--) on &
NFA state 225: --> 227 (229) on EPSILON
NFA state 226: (TERMINAL) accepting <return ANDAND;
>
NFA state 227: --> 228 (--) on |
NFA state 228: --> 230 (--) on |
NFA state 229: --> 231 (233) on EPSILON
NFA state 230: (TERMINAL) accepting <return OROR;
>
NFA state 231: --> 232 (--) on ?
NFA state 232: (TERMINAL) accepting <return QUEST;
>
NFA state 233: --> 234 (236) on EPSILON
NFA state 234: --> 235 (--) on :
NFA state 235: (TERMINAL) accepting <return COLON;
>
NFA state 236: --> 237 (239) on EPSILON
NFA state 237: --> 238 (--) on ,
NFA state 238: (TERMINAL) accepting <return COMMA;
>
NFA state 239: --> 240 (242) on EPSILON
NFA state 240: --> 241 (--) on ;
NFA state 241: (TERMINAL) accepting <return SEMI;
>
NFA state 242: --> 243 (245) on EPSILON
NFA state 243: --> 244 (--) on .
NFA state 244: --> 246 (--) on .
NFA state 245: --> 248 (252) on EPSILON
NFA state 246: --> 247 (--) on .
NFA state 247: (TERMINAL) accepting <return ELLIPSIS;
>
NFA state 248: --> 249 (--) on [ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz]
NFA state 249: --> 250 (253) on EPSILON
NFA state 250: --> 251 (--) on [0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz]
NFA state 251: --> 253 (250) on EPSILON
NFA state 252: --> 254 (256) on EPSILON
NFA state 253: (TERMINAL) accepting <return id_or_keyword( yytext );
>
NFA state 254: --> 255 (--) on \n
NFA state 255: (TERMINAL) accepting <fprintf(yycodeout, "\t\t\t\t\t\t\t\t\t/*%d*/\n", yylineno);
>
NFA state 256: --> 259 (261) on EPSILON
NFA state 257: --> 258 (--) on [^@^A^B^C^D^E^F^G^H^I^K ]
NFA state 258: --> 260 (257) on EPSILON
NFA state 259: --> 257 (--) on EPSILON
NFA state 260: (TERMINAL) accepting <;	/* ignore other white space */
>
NFA state 261: --> 262 (--) on EPSILON
NFA state 262: --> 263 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 263: (TERMINAL) accepting <yyerror( "Illegal character <%s>\n", yytext );
>

---------------------------NFA-----------------------------

---------------------------NFA-----------------------------
NFA state 0: --> 1 (3) on EPSILON (START STATE)
NFA state 1: --> 2 (--) on /
NFA state 2: --> 4 (--) on *
NFA state 3: --> 5 (14) on EPSILON
NFA state 4: (TERMINAL) accepting <{
                        int i;
                        while( i = ii_input() )
                        {
                           if( i < 0 )
                              ii_flushbuf();   		/* Discard lexeme. */
                           else if( i == '*'  &&  ii_lookahead(1) == '/' )
                           {
                                ii_input();
                                break;          	/* Recognized comment.*/
                           }
                        }
                        if( i == 0 )
                           yyerror( "End of file in comment\n" );
                    }
>
NFA state 5: --> 6 (--) on "
NFA state 6: --> 12 (15) on EPSILON
NFA state 7: --> 8 (--) on \\
NFA state 8: --> 10 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 9: --> 11 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 10: --> 13 (--) on EPSILON
NFA state 11: --> 13 (--) on EPSILON
NFA state 12: --> 7 (9) on EPSILON
NFA state 13: --> 15 (12) on EPSILON
NFA state 14: --> 17 (26) on EPSILON
NFA state 15: --> 16 (--) on "
NFA state 16: (TERMINAL) accepting <{ return STRING; }
>
NFA state 17: --> 18 (--) on "
NFA state 18: --> 24 (27) on EPSILON
NFA state 19: --> 20 (--) on \\
NFA state 20: --> 22 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 21: --> 23 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 22: --> 25 (--) on EPSILON
NFA state 23: --> 25 (--) on EPSILON
NFA state 24: --> 19 (21) on EPSILON
NFA state 25: --> 27 (24) on EPSILON
NFA state 26: --> 29 (31) on EPSILON
NFA state 27: --> 28 (--) on \n
NFA state 28: (TERMINAL) accepting <yyerror("Adding missing \" to string constant\n");
		    yymore();
>
NFA state 29: --> 30 (--) on \'
NFA state 30: --> 32 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 31: --> 34 (36) on EPSILON
NFA state 32: --> 33 (--) on \'
NFA state 33: (TERMINAL) accepting <return ICON ;
>
NFA state 34: --> 35 (--) on \'
NFA state 35: --> 37 (--) on \\
NFA state 36: --> 40 (48) on EPSILON
NFA state 37: --> 38 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 38: --> 39 (--) on \'
NFA state 39: (TERMINAL) accepting <return ICON ;
>
NFA state 40: --> 41 (--) on \'
NFA state 41: --> 43 (--) on \\
NFA state 42: --> 45 (--) on [01234567]
NFA state 43: --> 44 (--) on [01234567]
NFA state 44: --> 42 (50) on EPSILON
NFA state 45: --> 46 (49) on EPSILON
NFA state 46: --> 47 (--) on [01234567]
NFA state 47: --> 49 (--) on EPSILON
NFA state 48: --> 52 (61) on EPSILON
NFA state 49: --> 50 (--) on EPSILON
NFA state 50: --> 51 (--) on \'
NFA state 51: (TERMINAL) accepting <return ICON ;
>
NFA state 52: --> 53 (--) on \'
NFA state 53: --> 55 (--) on \\
NFA state 54: --> 58 (--) on [0123456789ABCDEFabcdef]
NFA state 55: --> 56 (--) on x
NFA state 56: --> 57 (--) on [0123456789ABCDEFabcdef]
NFA state 57: --> 54 (63) on EPSILON
NFA state 58: --> 59 (62) on EPSILON
NFA state 59: --> 60 (--) on [0123456789ABCDEFabcdef]
NFA state 60: --> 62 (--) on EPSILON
NFA state 61: --> 65 (72) on EPSILON
NFA state 62: --> 63 (--) on EPSILON
NFA state 63: --> 64 (--) on \'
NFA state 64: (TERMINAL) accepting <return ICON ;
>
NFA state 65: --> 66 (--) on 0
NFA state 66: --> 67 (70) on EPSILON
NFA state 67: --> 68 (--) on [01234567]
NFA state 68: --> 70 (67) on EPSILON
NFA state 69: --> 71 (--) on [LUlu]
NFA state 70: --> 69 (73) on EPSILON
NFA state 71: --> 73 (--) on EPSILON
NFA state 72: --> 74 (82) on EPSILON
NFA state 73: (TERMINAL) accepting <return ICON ;
>
NFA state 74: --> 75 (--) on 0
NFA state 75: --> 77 (--) on x
NFA state 76: --> 78 (--) on [0123456789ABCDEFabcdef]
NFA state 77: --> 76 (--) on EPSILON
NFA state 78: --> 80 (76) on EPSILON
NFA state 79: --> 81 (--) on [LUlu]
NFA state 80: --> 79 (83) on EPSILON
NFA state 81: --> 83 (--) on EPSILON
NFA state 82: --> 84 (91) on EPSILON
NFA state 83: (TERMINAL) accepting <return ICON ;
>
NFA state 84: --> 85 (--) on [123456789]
NFA state 85: --> 86 (89) on EPSILON
NFA state 86: --> 87 (--) on [0123456789]
NFA state 87: --> 89 (86) on EPSILON
NFA state 88: --> 90 (--) on [LUlu]
NFA state 89: --> 88 (92) on EPSILON
NFA state 90: --> 92 (--) on EPSILON
NFA state 91: --> 114 (128) on EPSILON
NFA state 92: (TERMINAL) accepting <return ICON ;
>
NFA state 93: --> 94 (--) on [0123456789]
NFA state 94: --> 96 (93) on EPSILON
NFA state 95: --> 93 (--) on EPSILON
NFA state 96: --> 106 (--) on EPSILON
NFA state 97: --> 98 (--) on [0123456789]
NFA state 98: --> 100 (97) on EPSILON
NFA state 99: --> 97 (--) on EPSILON
NFA state 100: --> 102 (--) on .
NFA state 101: --> 103 (--) on [0123456789]
NFA state 102: --> 101 (105) on EPSILON
NFA state 103: --> 105 (101) on EPSILON
NFA state 104: --> 95 (99) on EPSILON
NFA state 105: --> 106 (--) on EPSILON
NFA state 106: --> 116 (--) on EPSILON
NFA state 107: --> 108 (--) on [0123456789]
NFA state 108: --> 110 (107) on EPSILON
NFA state 109: --> 107 (110) on EPSILON
NFA state 110: --> 112 (--) on .
NFA state 111: --> 113 (--) on [0123456789]
NFA state 112: --> 111 (--) on EPSILON
NFA state 113: --> 115 (111) on EPSILON
NFA state 114: --> 104 (109) on EPSILON
NFA state 115: --> 116 (--) on EPSILON
NFA state 116: --> 117 (126) on EPSILON
NFA state 117: --> 118 (--) on [Ee]
NFA state 118: --> 119 (122) on EPSILON
NFA state 119: --> 120 (--) on [+-]
NFA state 120: --> 122 (--) on EPSILON
NFA state 121: --> 123 (--) on [0123456789]
NFA state 122: --> 121 (--) on EPSILON
NFA state 123: --> 125 (121) on EPSILON
NFA state 124: --> 127 (--) on [Ff]
NFA state 125: --> 126 (--) on EPSILON
NFA state 126: --> 124 (129) on EPSILON
NFA state 127: --> 129 (--) on EPSILON
NFA state 128: --> 130 (132) on EPSILON
NFA state 129: (TERMINAL) accepting <return FCON ;
>
NFA state 130: --> 131 (--) on (
NFA state 131: (TERMINAL) accepting <return LP;
>
NFA state 132: --> 133 (135) on EPSILON
NFA state 133: --> 134 (--) on )
NFA state 134: (TERMINAL) accepting <return RP;
>
NFA state 135: --> 136 (138) on EPSILON
NFA state 136: --> 137 (--) on {
NFA state 137: (TERMINAL) accepting <return LC;
>
NFA state 138: --> 139 (141) on EPSILON
NFA state 139: --> 140 (--) on }
NFA state 140: (TERMINAL) accepting <return RC;
>
NFA state 141: --> 142 (144) on EPSILON
NFA state 142: --> 143 (--) on [
NFA state 143: (TERMINAL) accepting <return LB;
>
NFA state 144: --> 145 (147) on EPSILON
NFA state 145: --> 146 (--) on ]
NFA state 146: (TERMINAL) accepting <return RB;
>
NFA state 147: --> 148 (150) on EPSILON
NFA state 148: --> 149 (--) on -
NFA state 149: --> 151 (--) on >
NFA state 150: --> 152 (154) on EPSILON
NFA state 151: (TERMINAL) accepting <yylval.ascii = *yytext;
			return STRUCTOP;
>
NFA state 152: --> 153 (--) on .
NFA state 153: (TERMINAL) accepting <yylval.ascii = *yytext;
			return STRUCTOP;
>
NFA state 154: --> 155 (157) on EPSILON
NFA state 155: --> 156 (--) on +
NFA state 156: --> 158 (--) on +
NFA state 157: --> 159 (161) on EPSILON
NFA state 158: (TERMINAL) accepting <yylval.ascii = *yytext;
			return INCOP;
>
NFA state 159: --> 160 (--) on -
NFA state 160: --> 162 (--) on -
NFA state 161: --> 163 (165) on EPSILON
NFA state 162: (TERMINAL) accepting <yylval.ascii = *yytext;
			return INCOP;
>
NFA state 163: --> 164 (--) on [!~]
NFA state 164: (TERMINAL) accepting <yylval.ascii = *yytext;
			return UNOP;
>
NFA state 165: --> 166 (168) on EPSILON
NFA state 166: --> 167 (--) on *
NFA state 167: (TERMINAL) accepting <return STAR;
>
NFA state 168: --> 169 (171) on EPSILON
NFA state 169: --> 170 (--) on [%/]
NFA state 170: (TERMINAL) accepting <yylval.ascii = *yytext;
			return DIVOP;
>
NFA state 171: --> 172 (174) on EPSILON
NFA state 172: --> 173 (--) on +
NFA state 173: (TERMINAL) accepting <return PLUS;
>
NFA state 174: --> 175 (177) on EPSILON
NFA state 175: --> 176 (--) on -
NFA state 176: (TERMINAL) accepting <return MINUS;
>
NFA state 177: --> 183 (186) on EPSILON
NFA state 178: --> 179 (--) on <
NFA state 179: --> 181 (--) on <
NFA state 180: --> 182 (--) on >
NFA state 181: --> 185 (--) on EPSILON
NFA state 182: --> 184 (--) on >
NFA state 183: --> 178 (180) on EPSILON
NFA state 184: --> 185 (--) on EPSILON
NFA state 185: (TERMINAL) accepting <yylval.ascii = *yytext;
		        return SHIFTOP;
>
NFA state 186: --> 187 (191) on EPSILON
NFA state 187: --> 188 (--) on [<>]
NFA state 188: --> 189 (192) on EPSILON
NFA state 189: --> 190 (--) on =
NFA state 190: --> 192 (--) on EPSILON
NFA state 191: --> 193 (195) on EPSILON
NFA state 192: (TERMINAL) accepting <yylval.ascii = yytext[1] ? (yytext[0]=='>' ? 'G' : 'L')
						 : (yytext[0]		      );
			return RELOP;
>
NFA state 193: --> 194 (--) on [!=]
NFA state 194: --> 196 (--) on =
NFA state 195: --> 197 (199) on EPSILON
NFA state 196: (TERMINAL) accepting <yylval.ascii = *yytext;
                   	return EQUOP;
>
NFA state 197: --> 198 (--) on [%&*+-/^|]
NFA state 198: --> 200 (--) on =
NFA state 199: --> 206 (209) on EPSILON
NFA state 200: (TERMINAL) accepting <yylval.ascii = *yytext;
			return ASSIGNOP;
>
NFA state 201: --> 202 (--) on <
NFA state 202: --> 204 (--) on <
NFA state 203: --> 205 (--) on >
NFA state 204: --> 208 (--) on EPSILON
NFA state 205: --> 207 (--) on >
NFA state 206: --> 201 (203) on EPSILON
NFA state 207: --> 208 (--) on EPSILON
NFA state 208: --> 210 (--) on =
NFA state 209: --> 211 (213) on EPSILON
NFA state 210: (TERMINAL) accepting <yylval.ascii = *yytext;
			return ASSIGNOP;
>
NFA state 211: --> 212 (--) on =
NFA state 212: (TERMINAL) accepting <return EQUAL;
>
NFA state 213: --> 214 (216) on EPSILON
NFA state 214: --> 215 (--) on &
NFA state 215: (TERMINAL) accepting <return AND;
>
NFA state 216: --> 217 (219) on EPSILON
NFA state 217: --> 218 (--) on ^
NFA state 218: (TERMINAL) accepting <return XOR;
>
NFA state 219: --> 220 (222) on EPSILON
NFA state 220: --> 221 (--) on |
NFA state 221: (TERMINAL) accepting <return OR;
>
NFA state 222: --> 223 (225) on EPSILON
NFA state 223: --> 224 (--) on &
NFA state 224: --> 226 (--) on &
NFA state 225: --> 227 (229) on EPSILON
NFA state 226: (TERMINAL) accepting <return ANDAND;
>
NFA state 227: --> 228 (--) on |
NFA state 228: --> 230 (--) on |
NFA state 229: --> 231 (233) on EPSILON
NFA state 230: (TERMINAL) accepting <return OROR;
>
NFA state 231: --> 232 (--) on ?
NFA state 232: (TERMINAL) accepting <return QUEST;
>
NFA state 233: --> 234 (236) on EPSILON
NFA state 234: --> 235 (--) on :
NFA state 235: (TERMINAL) accepting <return COLON;
>
NFA state 236: --> 237 (239) on EPSILON
NFA state 237: --> 238 (--) on ,
NFA state 238: (TERMINAL) accepting <return COMMA;
>
NFA state 239: --> 240 (242) on EPSILON
NFA state 240: --> 241 (--) on ;
NFA state 241: (TERMINAL) accepting <return SEMI;
>
NFA state 242: --> 243 (245) on EPSILON
NFA state 243: --> 244 (--) on .
NFA state 244: --> 246 (--) on .
NFA state 245: --> 248 (252) on EPSILON
NFA state 246: --> 247 (--) on .
NFA state 247: (TERMINAL) accepting <return ELLIPSIS;
>
NFA state 248: --> 249 (--) on [ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz]
NFA state 249: --> 250 (253) on EPSILON
NFA state 250: --> 251 (--) on [0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz]
NFA state 251: --> 253 (250) on EPSILON
NFA state 252: --> 254 (256) on EPSILON
NFA state 253: (TERMINAL) accepting <return id_or_keyword( yytext );
>
NFA state 254: --> 255 (--) on \n
NFA state 255: (TERMINAL) accepting <fprintf(yycodeout, "\t\t\t\t\t\t\t\t\t/*%d*/\n", yylineno);
>
NFA state 256: --> 259 (261) on EPSILON
NFA state 257: --> 258 (--) on [^@^A^B^C^D^E^F^G^H^I^K ]
NFA state 258: --> 260 (257) on EPSILON
NFA state 259: --> 257 (--) on EPSILON
NFA state 260: (TERMINAL) accepting <;	/* ignore other white space */
>
NFA state 261: --> 262 (--) on EPSILON
NFA state 262: --> 263 (--) on [^@^A^B^C^D^E^F^G^H^I^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~]
NFA state 263: (TERMINAL) accepting <yyerror( "Illegal character <%s>\n", yytext );
>

---------------------------NFA-----------------------------
making DFA:*--------------------------------------------------
working on DFA state[0] = Nfa states{0 1 3 5 14 17 26 29 31 34 36 40 48 52 61 65 72 74 82 84 91 93 95 97 99 104 107 109 110 114 128 130 132 133 135 136 138 139 141 142 144 145 147 148 150 152 154 155 157 159 161 163 165 166 168 169 171 172 174 175 177 178 180 183 186 187 191 193 195 197 199 201 203 206 209 211 213 214 216 217 219 220 222 223 225 227 229 231 233 234 236 237 239 240 242 243 245 248 252 254 256 257 259 261 262 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[1] = Nfa states{263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[2] = Nfa states{164 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[3] = Nfa states{140 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[4] = Nfa states{198 221 228 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[5] = Nfa states{137 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[6] = Nfa states{249 250 253 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[7] = Nfa states{198 218 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[8] = Nfa states{146 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[9] = Nfa states{143 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[10] = Nfa states{232 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[11] = Nfa states{182 188 189 192 205 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[12] = Nfa states{194 212 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[13] = Nfa states{179 188 189 192 202 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[14] = Nfa states{241 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[15] = Nfa states{235 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[16] = Nfa states{85 86 88 89 92 93 94 96 97 98 100 106 107 108 110 116 117 124 126 129 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[17] = Nfa states{66 67 69 70 73 75 93 94 96 97 98 100 106 107 108 110 116 117 124 126 129 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[18] = Nfa states{2 170 198 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[19] = Nfa states{111 112 153 244 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[20] = Nfa states{149 160 176 198 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[21] = Nfa states{238 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[22] = Nfa states{156 173 198 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[23] = Nfa states{167 198 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[24] = Nfa states{134 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[25] = Nfa states{131 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[26] = Nfa states{30 35 41 53 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[27] = Nfa states{198 215 224 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[28] = Nfa states{170 198 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[29] = Nfa states{6 7 9 12 15 18 19 21 24 27 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[30] = Nfa states{164 194 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[31] = Nfa states{257 258 260 263 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[32] = Nfa states{255 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[33] = Nfa states{230 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[34] = Nfa states{200 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[35] = Nfa states{250 251 253 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[36] = Nfa states{184 185 207 208 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[37] = Nfa states{190 192 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[38] = Nfa states{196 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[39] = Nfa states{181 185 204 208 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[40] = Nfa states{90 92 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[41] = Nfa states{127 129 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[42] = Nfa states{118 119 121 122 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[43] = Nfa states{86 87 88 89 92 93 94 96 97 98 100 106 107 108 110 116 117 124 126 129 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[44] = Nfa states{101 102 105 106 111 112 116 117 124 126 129 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[45] = Nfa states{76 77 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[46] = Nfa states{71 73 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[47] = Nfa states{93 94 96 97 98 100 106 107 108 110 116 117 124 126 129 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[48] = Nfa states{67 68 69 70 73 93 94 96 97 98 100 106 107 108 110 116 117 124 126 129 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[49] = Nfa states{4 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[50] = Nfa states{111 113 115 116 117 124 126 129 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[51] = Nfa states{246 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[52] = Nfa states{151 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[53] = Nfa states{162 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[54] = Nfa states{158 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[55] = Nfa states{32 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[56] = Nfa states{32 37 43 55 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[57] = Nfa states{226 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[58] = Nfa states{7 9 11 12 13 15 19 21 23 24 25 27 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[59] = Nfa states{7 8 9 11 12 13 15 19 20 21 23 24 25 27 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[60] = Nfa states{16 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[61] = Nfa states{28 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[62] = Nfa states{257 258 260 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[63] = Nfa states{210 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[64] = Nfa states{121 123 124 125 126 129 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[65] = Nfa states{120 121 122 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[66] = Nfa states{101 103 105 106 111 113 115 116 117 124 126 129 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[67] = Nfa states{76 78 79 80 83 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[68] = Nfa states{247 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[69] = Nfa states{33 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[70] = Nfa states{38 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[71] = Nfa states{38 56 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[72] = Nfa states{38 42 44 50 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[73] = Nfa states{33 38 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[74] = Nfa states{7 9 10 11 12 13 15 19 21 22 23 24 25 27 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[75] = Nfa states{7 8 9 10 11 12 13 15 19 20 21 22 23 24 25 27 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[76] = Nfa states{7 9 10 12 13 15 16 19 21 22 24 25 27 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[77] = Nfa states{81 83 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[78] = Nfa states{39 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[79] = Nfa states{54 57 63 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[80] = Nfa states{45 46 49 50 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[81] = Nfa states{39 51 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[82] = Nfa states{58 59 62 63 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[83] = Nfa states{64 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[84] = Nfa states{47 49 50 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[85] = Nfa states{51 }
nfaSet is nullptr 
*--------------------------------------------------
working on DFA state[86] = Nfa states{60 62 63 }
nfaSet is nullptr 
 there are 86 accpeting string 

87 out of 254 DFA states in initial machine.
11223 bytes required for uncompressed tables

Initial grouping:
	 group 0: {0 
}
	 group 1: {1 26 29 yyerror( "Illegal character <%s>\n", yytext );

}
	 group 2: {2 30 yylval.ascii = *yytext;
			return UNOP;

}
	 group 3: {3 return RC;

}
	 group 4: {4 return OR;

}
	 group 5: {5 return LC;

}
	 group 6: {6 35 return id_or_keyword( yytext );

}
	 group 7: {7 return XOR;

}
	 group 8: {8 return RB;

}
	 group 9: {9 return LB;

}
	 group 10: {10 return QUEST;

}
	 group 11: {11 13 37 yylval.ascii = yytext[1] ? (yytext[0]=='>' ? 'G' : 'L')
						 : (yytext[0]		      );
			return RELOP;

}
	 group 12: {12 return EQUAL;

}
	 group 13: {14 yylval.ascii = yytext[1] ? (yytext[0]=='>' ? 'G' : 'L')
						 : (yytext[0]		      );
			return RELOP;

}
	 group 14: {15 return SEMI;

}
	 group 15: {16 17 40 43 46 48 67 69 70 71 72 73 77 78 79 80 81 83 84 85 86 return COLON;

}
	 group 16: {18 28 return ICON ;

}
	 group 17: {19 52 return ICON ;

}
	 group 18: {20 yylval.ascii = *yytext;
			return DIVOP;

}
	 group 19: {21 yylval.ascii = *yytext;
			return STRUCTOP;

}
	 group 20: {22 return MINUS;

}
	 group 21: {23 return COMMA;

}
	 group 22: {24 return PLUS;

}
	 group 23: {25 return STAR;

}
	 group 24: {27 return RP;

}
	 group 25: {31 62 return LP;

}
	 group 26: {32 yyerror( "Illegal character <%s>\n", yytext );

}
	 group 27: {33 return AND;

}
	 group 28: {34 55 56 58 59 63 yylval.ascii = *yytext;
			return DIVOP;

}
	 group 29: {36 39 yyerror( "Illegal character <%s>\n", yytext );

}
	 group 30: {38 yylval.ascii = *yytext;
			return UNOP;

}
	 group 31: {41 42 44 45 47 50 51 64 65 66 ;	/* ignore other white space */

}
	 group 32: {49 fprintf(yycodeout, "\t\t\t\t\t\t\t\t\t/*%d*/\n", yylineno);

}
	 group 33: {53 54 return OROR;

}
	 group 34: {57 yylval.ascii = *yytext;
			return ASSIGNOP;

}
	 group 35: {60 76 return id_or_keyword( yytext );

}
	 group 36: {61 74 75 82 yylval.ascii = *yytext;
		        return SHIFTOP;

}
	 group 37: {68 yylval.ascii = yytext[1] ? (yytext[0]=='>' ? 'G' : 'L')
						 : (yytext[0]		      );
			return RELOP;

}

	state 86 is in group 15
	state 85 is in group 15
	state 84 is in group 15
	state 83 is in group 15
	state 82 is in group 36
	state 81 is in group 15
	state 80 is in group 15
	state 79 is in group 15
	state 78 is in group 15
	state 77 is in group 15
	state 76 is in group 35
	state 75 is in group 36
	state 74 is in group 36
	state 73 is in group 15
	state 72 is in group 15
	state 71 is in group 15
	state 70 is in group 15
	state 69 is in group 15
	state 68 is in group 37
	state 67 is in group 15
	state 66 is in group 31
	state 65 is in group 31
	state 64 is in group 31
	state 63 is in group 28
	state 62 is in group 25
	state 61 is in group 36
	state 60 is in group 35
	state 59 is in group 28
	state 58 is in group 28
	state 57 is in group 34
	state 56 is in group 28
	state 55 is in group 28
	state 54 is in group 33
	state 53 is in group 33
	state 52 is in group 17
	state 51 is in group 31
	state 50 is in group 31
	state 49 is in group 32
	state 48 is in group 15
	state 47 is in group 31
	state 46 is in group 15
	state 45 is in group 31
	state 44 is in group 31
	state 43 is in group 15
	state 42 is in group 31
	state 41 is in group 31
	state 40 is in group 15
	state 39 is in group 29
	state 38 is in group 30
	state 37 is in group 11
	state 36 is in group 29
	state 35 is in group  6
	state 34 is in group 28
	state 33 is in group 27
	state 32 is in group 26
	state 31 is in group 25
	state 30 is in group  2
	state 29 is in group  1
	state 28 is in group 16
	state 27 is in group 24
	state 26 is in group  1
	state 25 is in group 23
	state 24 is in group 22
	state 23 is in group 21
	state 22 is in group 20
	state 21 is in group 19
	state 20 is in group 18
	state 19 is in group 17
	state 18 is in group 16
	state 17 is in group 15
	state 16 is in group 15
	state 15 is in group 14
	state 14 is in group 13
	state 13 is in group 11
	state 12 is in group 12
	state 11 is in group 11
	state 10 is in group 10
	state 9 is in group  9
	state 8 is in group  8
	state 7 is in group  7
	state 6 is in group  6
	state 5 is in group  5
	state 4 is in group  4
	state 3 is in group  3
	state 2 is in group  2
	state 1 is in group  1
1 26 29 the NumGroups is 38
2 30 the NumGroups is 38
6 35 the NumGroups is 38
11 13 37 the NumGroups is 38
16 17 40 43 46 48 67 69 70 71 72 73 77 78 79 80 81 83 84 85 86 the NumGroups is 38
18 28 the NumGroups is 38
19 52 the NumGroups is 38
31 62 the NumGroups is 38
34 55 56 58 59 63 the NumGroups is 38
36 39 the NumGroups is 38
41 42 44 45 47 50 51 64 65 66 the NumGroups is 38
53 54 the NumGroups is 38
60 76 the NumGroups is 38
61 74 75 82 the NumGroups is 38
<end of output>
Test time =   0.02 sec
----------------------------------------------------------
Test Passed.
"lexMem" end time: Mar 22 23:42 CST
"lexMem" time elapsed: 00:00:00
----------------------------------------------------------

End testing: Mar 22 23:42 CST
